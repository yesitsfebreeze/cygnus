#define BASE_LAYER 0
#define LEFT_LAYER 1
#define RIGHT_LAYER 2
#define COMBO_LAYER 3


#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// #define SPC1 &lt 1 SPACE
// #define SPC2 &lt 2 SPACE
// #define SPC3 &lt 3 SPACE

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
        };

        LPRN: LPRN {
            compatible = "zmk,behavior-mod-morph";
            label = "LPRN";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        RPEN: RPEN {
            compatible = "zmk,behavior-mod-morph";
            label = "RPEN";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        SLASH: SLASH {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH";
            bindings = <&kp SLASH>, <&kp NON_US_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        LBRKT: LBRKT {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRKT";
            bindings = <&kp LEFT_BRACKET>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        RBRKT: RBRKT {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRKT";
            bindings = <&kp RIGHT_BRACKET>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        COL: COL {
            compatible = "zmk,behavior-mod-morph";
            label = "COL";
            bindings = <&kp SEMICOLON>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        QUOT: QUOT {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOT";
            bindings = <&kp DOUBLE_QUOTES>, <&kp SQT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        DOT_QUES: DOT_QUES {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_QUES";
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        COM_EXCL: COM_EXCL {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_EXCL";
            bindings = <&kp COMMA>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        eql_only: eql_only {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_ONLY";
            bindings = <&kp EQUAL>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        COM_DOT: COM_DOT {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_DOT";
            bindings = <&kp COMMA>, <&kp PERIOD>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        BSP_DEL: BSP_DEL {
            compatible = "zmk,behavior-mod-morph";
            label = "BSP_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        ma_equal: ma_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>, <&macro_press>;

            label = "MA_EQUAL";
        };

        ma_pointer: ma_pointer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MA_POINTER";
        };

        ma_or: ma_or {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp PIPE>;
            label = "MA_OR";
        };

        ma_and: ma_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp AMPS &kp AMPS>;
            label = "MA_AND";
        };
    };

    combos {
        compatible = "zmk,combos";

        alt_tab {
            bindings = <&kp LA(TAB)>;
            key-positions = <24 0>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE_LAYER {
            bindings = <
&kp ESC     &kp Q  &kp W     &kp E      &kp R        &kp Y        &kp U     &kp I    &kp O  &kp P
&kp TAB     &kp A  &kp S     &kp D      &kp T        &kp F        &kp H     &kp J    &kp K  &kp L
&kp LSHIFT  &kp Z  &kp X     &kp C      &kp V        &kp G        &kp N     &kp M    &kp B  &kp ENTER
                   &ht LALT LGUI &kp LCTRL  &lt 1 SPACE    &lt 2  SPACE  &BSP_DEL  &COM_DOT
            >;

            label = "BASE_LAYER";
        };

        LEFT_LAYER {
            bindings = <
&none       &kp N1  &kp N2  &kp N3       &none    &none        &ma_pointer  &ma_and      &ma_or     &eql_only
&kp N0      &kp N4  &kp N5  &kp N6       &none    &none        &none        &none        &semi_col  &quot
&kp LSHIFT  &kp N7  &kp N8  &nine_tilde  &none    &none        &none        &none        &none      &none
                    &trans  &trans       &none    &lt 3 SPACE  &trans       &kp LA(TAB)
            >;

            label = "LEFT_LAYER";
        };

        RIGHT_LAYER {
            bindings = <
&kp LS(GRAVE)  &kp EXCL       &kp AT_SIGN   &kp HASH   &lbrkt         &rbrkt  &none     &none          &none      &eql_only
&none          &kp DOLLAR     &kp PERCENT   &kp CARET  &lprn          &rpen   &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT
&trans         &kp AMPERSAND  &kp ASTERISK  &kp TILDE  &none          &none   &kp HOME  &kp PAGE_DOWN  &kp PG_DN  &kp END
                              &trans        &trans     &lt 3 SPACE    &none   &trans    &kp LA(TAB)
            >;

            label = "RIGHT_LAYER";
        };

        COMBO_LAYER {
            bindings = <
&kp X  &none  &none  &none  &bt BT_CLR_ALL    &none           &none           &none         &none            &none
&none  &none  &none  &none  &bt BT_SEL 0      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
&none  &none  &none  &none  &none             &none           &none           &none         &none            &none
              &none  &none  &none             &none           &none
            >;

            label = "COMBO_LAYER";
        };
    };
};
